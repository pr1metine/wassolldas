----------------------------------------------------------------------------------
-- Company:  DHBW Ravensburg
-- Engineer: Quang Thanh Ta
-- 
-- Create Date: 12/11/2022 05:02:09 PM
-- Design Name: wsolated
-- Module Name: I2STransmitter - Behavioral
-- Project Name: wassolldas
-- Target Devices: Arty A7-35T
-- Tool Versions: Vivado 2022.1.2
-- Description: 
--      Implements I2S transmission. 
-- Dependencies: 
-- 
-- Revision: v1.0.0
-- 
----------------------------------------------------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity I2STransmitter is
    -- Transmits 16 bit 
    Generic ( WIDTH: INTEGER := 16 );
    Port (
        -- Source Clock generated by I2SClockGenerator
        CLK : in STD_LOGIC;
        -- Aborts current transmission. Active high
        RESET : in STD_LOGIC;
        -- Signals readiness to receive next audio signal from ROM
        READY : out STD_LOGIC;
        -- Current audio signal
        TX : in STD_LOGIC_VECTOR(((WIDTH * 2) - 1) downto 0);
        -- Word select
        LRCK : out STD_LOGIC;
        -- Source Clock for Pmod
        SCLK : out STD_LOGIC;
        -- Serial Data for Pmod
        SDIN : out STD_LOGIC);
end I2STransmitter;

architecture Behavioral of I2STransmitter is
    type State is (STATE_RESET, STATE_LOAD_WORD, STATE_TRANSMIT_WORD);
    signal currState: State := STATE_RESET;

    signal regTX: STD_LOGIC_VECTOR(((2 * WIDTH) - 1) downto 0) := (others => '0');
    signal regREADY: STD_LOGIC := '0';
    signal regLRCK: STD_LOGIC := '1';
    signal regSDIN: STD_LOGIC := '0';
    signal enable: STD_LOGIC := '0';

begin

    process (CLK)
        variable bitCounter: INTEGER := 0;
    begin
        if rising_edge(CLK) then
            case currState is
                when STATE_RESET =>
                    regREADY <= '0';
                    regLRCK <= '1';
                    enable <= '1';
                    regSDIN <= '0';
                    regTX <= (others => '0');
                    currState <= STATE_LOAD_WORD;
                when STATE_LOAD_WORD =>
                    bitCounter := 0;
                    regTX <= TX;
                    regLRCK <= '0';
                    currState <= STATE_TRANSMIT_WORD;
                when STATE_TRANSMIT_WORD =>
                    bitCounter := bitCounter + 1;
                    
                    -- if LSB of the left channel word is being sent,
                    -- switch to right channel
                    if bitCounter > (WIDTH - 1) then
                        regLRCK <= '1';
                    end if;
                    
                    -- if transmission is not complete
                    if bitCounter < (2 * WIDTH) - 1 then
                        regREADY <= '0';
                        currState <= STATE_TRANSMIT_WORD;
                    else
                        regREADY <= '1';
                        currState <= STATE_LOAD_WORD;
                    end if;
                    
                    -- If the below two lines were swapped, the logic flow would 
                    -- still stay the same. Furthermore, these assignments come
                    -- into effect in the next clock cycle.
                    regSDIN <= regTX(2 * WIDTH - 1);
                    regTX <= regTX((2 * WIDTH) - 2 downto 0) & "0";
            end case;

            if RESET = '1' then
                currState <= STATE_RESET;
            end if;
        end if;
    end process;

    READY <= regREADY;
    SCLK <= CLK and enable;
    LRCK <= regLRCK;
    SDIN <= regSDIN;
end Behavioral;
